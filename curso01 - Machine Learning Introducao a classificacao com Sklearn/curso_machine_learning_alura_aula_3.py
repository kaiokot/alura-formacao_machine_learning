# -*- coding: utf-8 -*-
"""Curso Machine Learning Alura - Aula #3

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14Iq3XYHBln60ex7tQKucXPTM01r_lOLw
"""

import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVC
import matplotlib.pyplot as plt
import numpy as np
from sklearn.svm import LinearSVC
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
import seaborn as sns
!pip install seaborn == 0.9.0

uri = 'https://gist.githubusercontent.com/guilhermesilveira/1b7d5475863c15f484ac495bd70975cf/raw/16aff7a0aee67e7c100a2a48b676a2d2d142f646/projects.csv'
dados = pd.read_csv(uri)
dados.head()

dados.columns = ["nao_finalizado", "horas_estimadas", "preco"]
troca = {
    0: 1,
    1: 0
}

dados["finalizado"] = dados.nao_finalizado.map(troca)

dados.head()


sns.scatterplot(x="horas_estimadas", y="preco", data=dados)

sns.scatterplot(x="horas_estimadas", hue="finalizado", y="preco", data=dados)

sns.relplot(x="horas_estimadas", hue="finalizado",
            y="preco", col="finalizado", data=dados)


x = dados[["horas_estimadas", "preco"]]
y = dados["finalizado"]

SEED = 20
treino_x, teste_x, treino_y, teste_y = train_test_split(x, y,
                                                        random_state=SEED, test_size=0.25,
                                                        stratify=y)

modelo = LinearSVC(random_state=SEED)
print("Treinaremos com %d elementos e testaremos com %d elementos" %
      (len(treino_x), len(teste_x)))
modelo.fit(treino_x, treino_y)

previsoes = modelo.predict(teste_x)
taxa_de_acerto = accuracy_score(teste_y, previsoes)


print("Taxa de acerto %.2f%%" % (taxa_de_acerto * 100))


previsoes_de_base = np.ones(len(teste_x))

acuracia = accuracy_score(teste_y, previsoes_de_base)

print("A acur√°cia do algoritmo baseline foi de %.2f%%" % (acuracia * 100))

sns.scatterplot(x="horas_estimadas", y="preco", hue=teste_y, data=teste_x)

x_min = teste_x.horas_estimadas.min()
x_max = teste_x.horas_estimadas.max()
y_min = teste_x.preco.min()
y_max = teste_x.preco.max()

print(x_min, x_max, y_min, y_max)

pixels = 100
eixo_x = np.arange(x_min, x_max, (x_max - x_min) / pixels)
eixo_y = np.arange(y_min, y_max, (y_max - y_min) / pixels)

xx, yy = np.meshgrid(eixo_x, eixo_y)

pontos = np.c_[xx.ravel(), yy.ravel()]

Z = modelo.predict(pontos)

Z = Z.reshape(xx.shape)
Z


plt.contourf(xx, yy, Z, alpha=0.5)
plt.scatter(teste_x.horas_estimadas, teste_x.preco, c=teste_y, s=1)


x = dados[["horas_estimadas", "preco"]]
y = dados["finalizado"]

SEED = 8
treino_x, teste_x, treino_y, teste_y = train_test_split(x, y,
                                                        random_state=SEED, test_size=0.25,
                                                        stratify=y)

modelo = SVC(random_state=SEED)
print("Treinaremos com %d elementos e testaremos com %d elementos" %
      (len(treino_x), len(teste_x)))
modelo.fit(treino_x, treino_y)

previsoes = modelo.predict(teste_x)
taxa_de_acerto = accuracy_score(teste_y, previsoes)

print("Taxa de acerto %.2f%%" % (taxa_de_acerto * 100))

x_min = teste_x.horas_estimadas.min()
x_max = teste_x.horas_estimadas.max()
y_min = teste_x.preco.min()
y_max = teste_x.preco.max()

pixels = 100
eixo_x = np.arange(x_min, x_max, (x_max - x_min) / pixels)
eixo_y = np.arange(y_min, y_max, (y_max - y_min) / pixels)

xx, yy = np.meshgrid(eixo_x, eixo_y)
pontos = np.c_[xx.ravel(), yy.ravel()]
Z = modelo.predict(pontos)
Z = Z.reshape(xx.shape)


plt.contourf(xx, yy, Z, alpha=0.5)
plt.scatter(teste_x.horas_estimadas, teste_x.preco, c=teste_y, s=1)


x = dados[["horas_estimadas", "preco"]]
y = dados["finalizado"]

SEED = 8
raw_treino_x, raw_teste_x, treino_y, teste_y = train_test_split(x, y,
                                                                random_state=SEED, test_size=0.25,
                                                                stratify=y)

modelo = SVC(random_state=SEED)
print("Treinaremos com %d elementos e testaremos com %d elementos" %
      (len(raw_treino_x), len(raw_teste_x)))

scaler = StandardScaler()
scaler.fit(raw_treino_x)

treino_x = scaler.transform(raw_treino_x)
teste_x = scaler.transform(raw_teste_x)

modelo.fit(treino_x, treino_y)

previsoes = modelo.predict(teste_x)
taxa_de_acerto = accuracy_score(teste_y, previsoes)

print("Taxa de acerto %.2f%%" % (taxa_de_acerto * 100))

data_x = teste_x[:, 0]
data_y = teste_x[:, 1]

x_min = data_x.min()
x_max = data_x.max()
y_min = data_y.min()
y_max = data_y.max()

pixels = 100
eixo_x = np.arange(x_min, x_max, (x_max - x_min) / pixels)
eixo_y = np.arange(y_min, y_max, (y_max - y_min) / pixels)

xx, yy = np.meshgrid(eixo_x, eixo_y)
pontos = np.c_[xx.ravel(), yy.ravel()]
Z = modelo.predict(pontos)
Z = Z.reshape(xx.shape)


plt.contourf(xx, yy, Z, alpha=0.5)
plt.scatter(data_x, data_y, c=teste_y, s=1)
