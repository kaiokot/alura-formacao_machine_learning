# -*- coding: utf-8 -*-
"""Curso Machine Learning Alura - Aula #2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1G5gC9Xh7kRrOSyR3JIaY7b2UQ6XxoCsN
"""

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.svm import LinearSVC
import pandas as pd

uri = 'https://gist.githubusercontent.com/guilhermesilveira/2d2efa37d66b6c84a722ea627a897ced/raw/10968b997d885cbded1c92938c7a9912ba41c615/tracking.csv'

dados = pd.read_csv(uri)

dados.head()

dados.columns = ["principal", "como_funciona", "contato", "comprou"]
dados.head()

x = dados[["principal", "como_funciona", "contato"]]
x.head()

y = dados["comprou"]
y.head()

treino_x = x[:75]
treino_y = y[:75]

teste_x = x[75:]
teste_y = y[75:]


modelo = LinearSVC()

modelo.fit(treino_x, treino_y)

previsoes = modelo.predict(teste_x)
taxa_de_acerto = accuracy_score(teste_y, previsoes)


print("Taxa de acerto %.2f%%" % (taxa_de_acerto * 100))

"""## **Usando a biblioteca para separar o treino / teste**"""


SEED = 20
treino_x, teste_x, treino_y, teste_y = train_test_split(
    x, y, random_state=SEED, test_size=0.25)

modelo = LinearSVC()

modelo.fit(treino_x, treino_y)

previsoes = modelo.predict(teste_x)
taxa_de_acerto = accuracy_score(teste_y, previsoes)


print("Taxa de acerto %.2f%%" % (taxa_de_acerto * 100))

treino_y.value_counts()

teste_y.value_counts()


SEED = 20
treino_x, teste_x, treino_y, teste_y = train_test_split(x, y,
                                                        random_state=SEED, test_size=0.25,
                                                        stratify=y)

print("Treinaremos com %d elementos e testaremos com %d elementos" %
      (len(treino_x), len(teste_x)))

modelo = LinearSVC()

modelo.fit(treino_x, treino_y)

previsoes = modelo.predict(teste_x)
taxa_de_acerto = accuracy_score(teste_y, previsoes)


print("Taxa de acerto %.2f%%" % (taxa_de_acerto * 100))

treino_y.value_counts()

teste_y.value_counts()
